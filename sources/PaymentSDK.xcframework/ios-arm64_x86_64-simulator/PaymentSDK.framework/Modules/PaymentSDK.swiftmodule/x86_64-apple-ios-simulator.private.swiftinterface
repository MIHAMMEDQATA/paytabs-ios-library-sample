// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PaymentSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import CommonCrypto
import CoreGraphics
import CoreML
import CoreTelephony
import Foundation
import PassKit
@_exported import PaymentSDK
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@_spi(STP) @objc final public class STPTelemetryClient : ObjectiveC.NSObject {
  @_spi(STP) public static var shared: PaymentSDK.STPTelemetryClient
  @_spi(STP) final public func addTelemetryFields(toParams params: inout [Swift.String : Any])
  @_spi(STP) final public func paramsByAddingTelemetryFields(toParams params: [Swift.String : Any]) -> [Swift.String : Any]
  @_spi(STP) final public func sendTelemetryData(forceSend: Swift.Bool = false, completion: ((Swift.Result<[Swift.String : Any], Swift.Error>) -> Swift.Void)? = nil)
  @_spi(STP) final public func updateFraudDetectionIfNecessary(completion: @escaping ((Swift.Result<PaymentSDK.FraudDetectionData, Swift.Error>) -> Swift.Void))
  @_spi(STP) final public class func shouldSendTelemetry() -> Swift.Bool
  @_spi(STP) public init(sessionConfiguration config: Foundation.URLSessionConfiguration)
  @_spi(STP) @objc deinit
}
@_spi(STP) extension Foundation.CharacterSet {
  @_spi(STP) public static let stp_asciiDigit: Foundation.CharacterSet
  @_spi(STP) public static let stp_asciiLetters: Foundation.CharacterSet
  @_spi(STP) public static let stp_invertedAsciiDigit: Foundation.CharacterSet
  @_spi(STP) public static let stp_postalCode: Foundation.CharacterSet
  @_spi(STP) public static let stp_invertedPostalCode: Foundation.CharacterSet
}
public protocol PaymentSDKMerchantConfiguration {
  var profileID: Swift.String { get set }
  var serverKey: Swift.String { get set }
  var clientKey: Swift.String { get set }
  var cartID: Swift.String { get set }
  var currency: Swift.String { get set }
  var amount: Swift.Double { get set }
  var cartDescription: Swift.String { get set }
  var languageCode: Swift.String? { get set }
  var tokeniseType: PaymentSDK.TokeniseType { get set }
  var tokenFormat: PaymentSDK.TokenFormat { get set }
  var merchantCountryCode: Swift.String { get set }
}
public protocol PaymentSDKApplePayConfiguration {
  var merchantIdentifier: Swift.String? { get set }
  var merchantName: Swift.String? { get set }
  var paymentNetworks: [PassKit.PKPaymentNetwork]? { get set }
}
open class PaymentSDKConfiguration : PaymentSDK.PaymentSDKMerchantConfiguration, PaymentSDK.PaymentSDKApplePayConfiguration, Swift.Codable {
  public var profileID: Swift.String
  public var serverKey: Swift.String
  public var clientKey: Swift.String
  public var transactionType: PaymentSDK.TransactionType
  public var transactionClass: PaymentSDK.TransactionClass
  public var cartID: Swift.String
  public var currency: Swift.String
  public var amount: Swift.Double
  public var cartDescription: Swift.String
  public var languageCode: Swift.String?
  public var theme: PaymentSDK.PaymentSDKTheme?
  public var forceShippingInfo: Swift.Bool
  public var showBillingInfo: Swift.Bool
  public var showShippingInfo: Swift.Bool
  public var billingDetails: PaymentSDK.PaymentSDKBillingDetails?
  public var shippingDetails: PaymentSDK.PaymentSDKShippingDetails?
  public var merchantIdentifier: Swift.String?
  public var paymentNetworks: [PassKit.PKPaymentNetwork]?
  public var merchantCountryCode: Swift.String
  public var serverIP: Swift.String?
  public var tokeniseType: PaymentSDK.TokeniseType
  public var tokenFormat: PaymentSDK.TokenFormat
  @available(swift, deprecated: 6.2.0, obsoleted: 7.0.0, message: "This will be removed in the near future, please use startTokenizedCardPayment method instead")
  public var token: Swift.String?
  @available(swift, deprecated: 6.2.0, obsoleted: 7.0.0, message: "This will be removed in the near future, please use startTokenizedCardPayment method instead")
  public var transactionReference: Swift.String?
  public var screenTitle: Swift.String?
  public var merchantName: Swift.String?
  public var hideCardScanner: Swift.Bool
  public var simplifyApplePayValidation: Swift.Bool
  public var alternativePaymentMethods: [PaymentSDK.AlternativePaymentMethod]?
  public var linkBillingNameWithCard: Swift.Bool
  public var callbackURL: Swift.String?
  public var isDigitalProduct: Swift.Bool
  public var enableZeroContacts: Swift.Bool
  public init()
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, currency: Swift.String, amount: Swift.Double, merchantCountryCode: Swift.String)
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, cartID: Swift.String, currency: Swift.String, amount: Swift.Double, cartDescription: Swift.String, languageCode: Swift.String? = nil, merchantCountryCode: Swift.String, tokeniseType: PaymentSDK.TokeniseType = .none, tokenFormat: PaymentSDK.TokenFormat = .hex32, token: Swift.String? = nil, transactionreference: Swift.String? = nil, serverIP: Swift.String? = nil, merchantIdentifier: Swift.String? = nil, paymentNetworks: [PassKit.PKPaymentNetwork]? = nil, forceShippingInfo: Swift.Bool = false, showBillingInfo: Swift.Bool = false, showShippingInfo: Swift.Bool = false, screenTitle: Swift.String? = nil, merchantName: Swift.String? = nil, hideCardScanner: Swift.Bool = false, billingDetails: PaymentSDK.PaymentSDKBillingDetails, shippingDetails: PaymentSDK.PaymentSDKShippingDetails? = nil, theme: PaymentSDK.PaymentSDKTheme? = PaymentSDKTheme.default, linkBillingNameWithCard: Swift.Bool = true, showSaveCardsUI: Swift.Bool = false, requestCVV: Swift.Bool = false, savedCardInfo: PaymentSDK.PaymentSDKSavedCardInfo? = nil, isDigitalProduct: Swift.Bool = false, enableZeroContacts: Swift.Bool = false)
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, cartID: Swift.String, currency: Swift.String, amount: Swift.Double, merchantName: Swift.String, cartDescription: Swift.String, languageCode: Swift.String? = nil, tokeniseType: PaymentSDK.TokeniseType = .none, tokenFormat: PaymentSDK.TokenFormat = .hex32, token: Swift.String? = nil, transactionreference: Swift.String? = nil, merchantCountryCode: Swift.String, serverIP: Swift.String? = nil, merchantIdentifier: Swift.String, paymentNetworks: [PassKit.PKPaymentNetwork]?, simplifyApplePayValidation: Swift.Bool = false, forceShippingInfo: Swift.Bool = false, billingDetails: PaymentSDK.PaymentSDKBillingDetails? = nil, shippingDetails: PaymentSDK.PaymentSDKShippingDetails? = nil, linkBillingNameWithCard: Swift.Bool = true, showSaveCardsUI: Swift.Bool = false, requestCVV: Swift.Bool = false, savedCardInfo: PaymentSDK.PaymentSDKSavedCardInfo? = nil, isDigitalProduct: Swift.Bool = false, enableZeroContacts: Swift.Bool = false)
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDK.PaymentSDKConfiguration : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PaymentSDKCardInputView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var paymentSDKCardParams: PaymentSDK.PaymentSDKCardParams? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onCardParamsChanged: ((_ cardParams: PaymentSDK.PaymentSDKCardParams?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func hideCardScanner(isHidden: Swift.Bool)
  @objc deinit
}
@_spi(STP) public enum StripeError : Swift.Error {
  @_spi(STP) case apiError(PaymentSDK.StripeAPIError)
  @_spi(STP) case invalidRequest
  @_spi(STP) public var localizedDescription: Swift.String {
    @_spi(STP) get
  }
}
@_spi(STP) extension PaymentSDK.StripeError : Foundation.LocalizedError {
  @_spi(STP) public var errorDescription: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var failureReason: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var recoverySuggestion: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var helpAnchor: Swift.String? {
    @_spi(STP) get
  }
}
@_spi(STP) extension PaymentSDK.StripeError : PaymentSDK.AnalyticLoggableError {
  @_spi(STP) public func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
}
@objc public class STPAppInfo : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, partnerId: Swift.String?, version: Swift.String?, url: Swift.String?)
  @objc public var name: Swift.String {
    get
  }
  @objc public var partnerId: Swift.String? {
    get
  }
  @objc public var version: Swift.String? {
    get
  }
  @objc public var url: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class StripeAPI : ObjectiveC.NSObject {
  @objc public static var defaultPublishableKey: Swift.String?
  @objc public func setDefaultPublishableKey(_ publishableKey: Swift.String)
  @objc public static var advancedFraudSignalsEnabled: Swift.Bool
  @objc public static var maxRetries: Swift.Int
  @objc public class var jcbPaymentNetworkSupported: Swift.Bool {
    @objc get
    @objc set(JCBPaymentNetworkSupported)
  }
  @objc public static var additionalEnabledApplePayNetworks: [PassKit.PKPaymentNetwork]
  @objc public class func canSubmitPaymentRequest(_ paymentRequest: PassKit.PKPaymentRequest) -> Swift.Bool
  @objc public class func deviceSupportsApplePay() -> Swift.Bool
  @objc(paymentRequestWithMerchantIdentifier:country:currency:) public class func paymentRequest(withMerchantIdentifier merchantIdentifier: Swift.String, country countryCode: Swift.String, currency currencyCode: Swift.String) -> PassKit.PKPaymentRequest
  @discardableResult
  @objc(handleStripeURLCallbackWithURL:) public static func handleURLCallback(with url: Foundation.URL) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@frozen public enum CardImageVerificationSheetResult {
  case completed(scannedCard: PaymentSDK.ScannedCard)
  case canceled(reason: PaymentSDK.CancellationReason)
  case failed(error: Swift.Error)
}
final public class CardImageVerificationSheet {
  public init(cardImageVerificationIntentId: Swift.String, cardImageVerificationIntentSecret: Swift.String, configuration: PaymentSDK.CardImageVerificationSheet.Configuration = Configuration())
  final public func present(from presentingViewController: UIKit.UIViewController, completion: @escaping (PaymentSDK.CardImageVerificationSheetResult) -> Swift.Void, animated: Swift.Bool = true)
  @objc deinit
}
extension PassKit.PKPaymentMethodType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class URLEncoder {
  @_spi(STP) final public class func string(byURLEncoding string: Swift.String) -> Swift.String
  @_spi(STP) final public class func convertToCamelCase(snakeCase input: Swift.String) -> Swift.String
  @_spi(STP) final public class func convertToSnakeCase(camelCase input: Swift.String) -> Swift.String
  @_spi(STP) @objc(queryStringFromParameters:) final public class func queryString(from parameters: [Swift.String : Any]) -> Swift.String
  @_spi(STP) @objc deinit
}
public struct UIConfiguration {
}
@_hasMissingDesignatedInitializers public class PaymentSDKCardParams {
  public var cardNumber: Swift.String {
    get
  }
  @objc deinit
}
@_spi(STP) extension Swift.Array {
  @_spi(STP) public func stp_boundSafeObject(at index: Swift.Int) -> Element?
}
extension Swift.Array where Element == Swift.String {
  public func caseInsensitiveContains(_ other: Swift.String) -> Swift.Bool
}
extension Swift.Array where Element : Swift.Equatable {
  @discardableResult
  public mutating func remove(_ element: Element) -> Element?
}
@_spi(STP) extension Swift.String {
  @_spi(STP) public enum Localized {
    @_spi(STP) public static var close: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var tryAgain: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card_title_capitalization: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card_privacy_link_text: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static func scanCardExpectedPrivacyLinkText() -> Foundation.NSAttributedString?
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PaymentSDKBillingDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var addressLine: Swift.String?
  @objc public var city: Swift.String?
  @objc public var state: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var zip: Swift.String?
  @objc override dynamic public init()
  public init(name: Swift.String?, email: Swift.String?, phone: Swift.String?, addressLine: Swift.String?, city: Swift.String?, state: Swift.String?, countryCode: Swift.String?, zip: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDK.PaymentSDKBillingDetails : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension PaymentSDK.PaymentSDKConfiguration {
  @discardableResult
  public func profileID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func serverKey(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func clientKey(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionType(_ value: PaymentSDK.TransactionType) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionClass(_ value: PaymentSDK.TransactionClass) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func cartID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func currency(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func amount(_ value: Swift.Double) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func cartDescription(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func languageCode(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func theme(_ value: PaymentSDK.PaymentSDKTheme) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func forceShippingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func showBillingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func showShippingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func billingDetails(_ value: PaymentSDK.PaymentSDKBillingDetails) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func shippingDetails(_ value: PaymentSDK.PaymentSDKShippingDetails) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantAppleBundleID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func applePayPaymentNetworks(_ value: [PassKit.PKPaymentNetwork]) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantCountryCode(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func serverIP(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokeniseType(_ value: PaymentSDK.TokeniseType) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokenFormat(_ value: PaymentSDK.TokenFormat) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokenisation(token: Swift.String, transactionReference: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func token(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionReference(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func screenTitle(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantName(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func hideCardScanner(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func simplifyApplePayValidation(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func alternativePaymentMehtods(_ value: [PaymentSDK.AlternativePaymentMethod]) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func addAlternativePaymentMethod(_ value: PaymentSDK.AlternativePaymentMethod) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func linkBillingNameWithCard(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  public func showSavedCardsUI(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
}
extension Foundation.URLSession {
  @_spi(STP) public func stp_performDataTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void, retryCount: Swift.Int = StripeAPI.maxRetries)
}
public protocol ThemeConfiguration {
  var logoImage: UIKit.UIImage? { get set }
  var secondaryColor: UIKit.UIColor? { get set }
  var secondaryFontColor: UIKit.UIColor? { get set }
  var secondaryFont: UIKit.UIFont? { get set }
  var primaryColor: UIKit.UIColor? { get set }
  var primaryFontColor: UIKit.UIColor? { get set }
  var primaryFont: UIKit.UIFont? { get set }
  var buttonColor: UIKit.UIColor? { get set }
  var buttonFontColor: UIKit.UIColor? { get set }
  var buttonFont: UIKit.UIFont? { get set }
  var titleFontColor: UIKit.UIColor? { get set }
  var titleFont: UIKit.UIFont? { get set }
  var backgroundColor: UIKit.UIColor? { get set }
  var placeholderColor: UIKit.UIColor? { get set }
  var strokeColor: UIKit.UIColor? { get set }
  var strokeThinckness: CoreFoundation.CGFloat? { get set }
  var inputsCornerRadius: CoreFoundation.CGFloat? { get set }
  var backButtonColor: UIKit.UIColor? { get set }
}
public class PaymentSDKTheme : PaymentSDK.ThemeConfiguration {
  public var logoImage: UIKit.UIImage?
  public var primaryColor: UIKit.UIColor?
  public var primaryFontColor: UIKit.UIColor?
  public var primaryFont: UIKit.UIFont?
  public var secondaryColor: UIKit.UIColor?
  public var secondaryFontColor: UIKit.UIColor?
  public var secondaryFont: UIKit.UIFont?
  public var strokeColor: UIKit.UIColor?
  public var strokeThinckness: CoreFoundation.CGFloat?
  public var inputsCornerRadius: CoreFoundation.CGFloat?
  public var buttonColor: UIKit.UIColor?
  public var buttonFontColor: UIKit.UIColor?
  public var buttonFont: UIKit.UIFont?
  public var titleFontColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var placeholderColor: UIKit.UIColor?
  public var backButtonColor: UIKit.UIColor?
  public init()
  public static var `default`: PaymentSDK.PaymentSDKTheme {
    get
  }
  @objc deinit
}
extension PaymentSDK.PaymentSDKTheme : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_spi(STP) final public class FileDownloader {
  @_spi(STP) public init(urlSession: Foundation.URLSession)
  @_spi(STP) final public func downloadFileTemporarily(from remoteURL: Foundation.URL) -> PaymentSDK.Future<Foundation.URL>
  @_spi(STP) final public func downloadFile(from remoteURL: Foundation.URL, fileReadingOptions: Foundation.Data.ReadingOptions = []) -> PaymentSDK.Future<Foundation.Data>
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers public class StripeJSONDecoder {
  @_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any]
  @_spi(STP) public var inputFormatting: Foundation.JSONSerialization.ReadingOptions
  @_spi(STP) public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  @_spi(STP) @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PaymentResultViewModel : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let responseStatus: Swift.String?, responseCode: Swift.String?, responseMessage: Swift.String?
  @objc final public let transactionTime: Swift.String?, acquirerMessage: Swift.String?, acquirerRRN: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class PaymentInfoViewModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var cardType: Swift.String?, cardScheme: Swift.String?, paymentDescription: Swift.String?, paymentMethod: Swift.String?
  public var expiryMonth: Swift.Int?, expiryYear: Swift.Int?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class PaymentSDKTransactionDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let token: Swift.String?, transactionReference: Swift.String?
  @objc final public let transactionType: Swift.String?, cartID: Swift.String?, cartDescription: Swift.String?
  @objc final public let cartCurrency: Swift.String?, cartAmount: Swift.String?
  @objc final public let paymentResult: PaymentSDK.PaymentResultViewModel?
  @objc final public let paymentInfo: PaymentSDK.PaymentInfoViewModel?
  @objc final public let billingDetails: PaymentSDK.PaymentSDKBillingDetails?
  @objc final public let shippingDetails: PaymentSDK.PaymentSDKShippingDetails?
  final public let profileId: Swift.Int?
  final public let tranCurrency: Swift.String?
  final public let tranTotal: Swift.String?
  final public let serviceId: Swift.Int?
  final public let merchantId: Swift.Int?
  final public let trace: Swift.String?
  public func isPending() -> Swift.Bool
  public func isAuthorized() -> Swift.Bool
  public func isOnHold() -> Swift.Bool
  public func isProcessed() -> Swift.Bool
  public func isSuccess() -> Swift.Bool
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public enum STPTextValidationState : Swift.Int {
  @_spi(STP) case empty
  @_spi(STP) case incomplete
  @_spi(STP) case complete
  @_spi(STP) case invalid
  @_spi(STP) public init?(rawValue: Swift.Int)
  @_spi(STP) public typealias RawValue = Swift.Int
  @_spi(STP) public var rawValue: Swift.Int {
    @_spi(STP) get
  }
}
@_spi(STP) @objc @_inheritsConvenienceInitializers open class STPNumericStringValidator : ObjectiveC.NSObject {
  @_spi(STP) public class func isStringNumeric(_ string: Swift.String) -> Swift.Bool
  @_spi(STP) public class func sanitizedNumericString(for string: Swift.String) -> Swift.String
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
@_spi(STP) extension PaymentSDK.StripeAPIConfiguration {
  @_spi(STP) public static let STPSDKVersion: Swift.String
}
@_spi(STP) extension UIKit.UIFont {
  @_spi(STP) public static func preferredFont(forTextStyle style: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight, maximumPointSize: CoreFoundation.CGFloat? = nil) -> UIKit.UIFont
  @_spi(STP) public func withPreferredSize(forTextStyle style: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight? = nil) -> UIKit.UIFont
}
public protocol CountryPickerViewDelegate : AnyObject {
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didSelectCountry country: PaymentSDK.Country)
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, willShow viewController: PaymentSDK.CountryPickerViewController)
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didShow viewController: PaymentSDK.CountryPickerViewController)
}
public protocol CountryPickerViewDataSource : AnyObject {
  func preferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
  func sectionTitleForPreferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  func showOnlyPreferredSection(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func sectionTitleLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  func sectionTitleLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  func cellLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  func cellLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  func cellImageViewSize(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreFoundation.CGSize
  func cellImageViewCornerRadius(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreFoundation.CGFloat
  func navigationTitle(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  func closeButtonNavigationItem(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIBarButtonItem?
  func searchBarPosition(in countryPickerView: PaymentSDK.CountryPickerView) -> PaymentSDK.SearchBarPosition
  func showPhoneCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func showCountryCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func showCheckmarkInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func localeForCountryNameInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Foundation.Locale
  func excludedCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
}
extension PaymentSDK.CountryPickerViewDataSource {
  public func preferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
  public func sectionTitleForPreferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  public func showOnlyPreferredSection(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func sectionTitleLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  public func sectionTitleLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  public func cellLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  public func cellLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  public func cellImageViewCornerRadius(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreFoundation.CGFloat
  public func cellImageViewSize(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreFoundation.CGSize
  public func navigationTitle(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  public func closeButtonNavigationItem(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIBarButtonItem?
  public func searchBarPosition(in countryPickerView: PaymentSDK.CountryPickerView) -> PaymentSDK.SearchBarPosition
  public func showPhoneCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func showCountryCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func showCheckmarkInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func localeForCountryNameInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Foundation.Locale
  public func excludedCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
}
extension PaymentSDK.CountryPickerViewDelegate {
  public func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, willShow viewController: PaymentSDK.CountryPickerViewController)
  public func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didShow viewController: PaymentSDK.CountryPickerViewController)
}
@objc public class PaymentSDKSavedCardInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var maskedCard: Swift.String
  @objc public var cardType: Swift.String
  public init(maskedCard: Swift.String, cardType: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public enum STPAnalyticEvent : Swift.String {
  @_spi(STP) case tokenCreation
  @_spi(STP) case sourceCreation
  @_spi(STP) case paymentMethodCreation
  @_spi(STP) case paymentMethodIntentCreation
  @_spi(STP) case setupIntentConfirmationAttempt
  @_spi(STP) case _3DS2AuthenticationRequestParamsFailed
  @_spi(STP) case _3DS2AuthenticationAttempt
  @_spi(STP) case _3DS2FrictionlessFlow
  @_spi(STP) case urlRedirectNextAction
  @_spi(STP) case _3DS2ChallengeFlowPresented
  @_spi(STP) case _3DS2ChallengeFlowTimedOut
  @_spi(STP) case _3DS2ChallengeFlowUserCanceled
  @_spi(STP) case _3DS2ChallengeFlowCompleted
  @_spi(STP) case _3DS2ChallengeFlowErrored
  @_spi(STP) case _3DS2RedirectUserCanceled
  @_spi(STP) case cardMetadataLoadedTooSlow
  @_spi(STP) case cardMetadataResponseFailure
  @_spi(STP) case cardMetadataMissingRange
  @_spi(STP) case cardScanSucceeded
  @_spi(STP) case cardScanCancelled
  @_spi(STP) case verificationSheetPresented
  @_spi(STP) case verificationSheetClosed
  @_spi(STP) case verificationSheetFailed
  @_spi(STP) case financialConnectionsSheetPresented
  @_spi(STP) case financialConnectionsSheetClosed
  @_spi(STP) case financialConnectionsSheetFailed
  @_spi(STP) case mcInitCustomCustomer
  @_spi(STP) case mcInitCompleteCustomer
  @_spi(STP) case mcInitCustomApplePay
  @_spi(STP) case mcInitCompleteApplePay
  @_spi(STP) case mcInitCustomCustomerApplePay
  @_spi(STP) case mcInitCompleteCustomerApplePay
  @_spi(STP) case mcInitCustomDefault
  @_spi(STP) case mcInitCompleteDefault
  @_spi(STP) case mcShowCustomNewPM
  @_spi(STP) case mcShowCustomSavedPM
  @_spi(STP) case mcShowCustomApplePay
  @_spi(STP) case mcShowCustomLink
  @_spi(STP) case mcShowCompleteNewPM
  @_spi(STP) case mcShowCompleteSavedPM
  @_spi(STP) case mcShowCompleteApplePay
  @_spi(STP) case mcShowCompleteLink
  @_spi(STP) case mcPaymentCustomNewPMSuccess
  @_spi(STP) case mcPaymentCustomSavedPMSuccess
  @_spi(STP) case mcPaymentCustomApplePaySuccess
  @_spi(STP) case mcPaymentCustomLinkSuccess
  @_spi(STP) case mcPaymentCompleteNewPMSuccess
  @_spi(STP) case mcPaymentCompleteSavedPMSuccess
  @_spi(STP) case mcPaymentCompleteApplePaySuccess
  @_spi(STP) case mcPaymentCompleteLinkSuccess
  @_spi(STP) case mcPaymentCustomNewPMFailure
  @_spi(STP) case mcPaymentCustomSavedPMFailure
  @_spi(STP) case mcPaymentCustomApplePayFailure
  @_spi(STP) case mcPaymentCustomLinkFailure
  @_spi(STP) case mcPaymentCompleteNewPMFailure
  @_spi(STP) case mcPaymentCompleteSavedPMFailure
  @_spi(STP) case mcPaymentCompleteApplePayFailure
  @_spi(STP) case mcPaymentCompleteLinkFailure
  @_spi(STP) case mcOptionSelectCustomNewPM
  @_spi(STP) case mcOptionSelectCustomSavedPM
  @_spi(STP) case mcOptionSelectCustomApplePay
  @_spi(STP) case mcOptionSelectCustomLink
  @_spi(STP) case mcOptionSelectCompleteNewPM
  @_spi(STP) case mcOptionSelectCompleteSavedPM
  @_spi(STP) case mcOptionSelectCompleteApplePay
  @_spi(STP) case mcOptionSelectCompleteLink
  @_spi(STP) case linkSignupCheckboxChecked
  @_spi(STP) case linkSignupFlowPresented
  @_spi(STP) case linkSignupStart
  @_spi(STP) case linkSignupComplete
  @_spi(STP) case linkSignupFailure
  @_spi(STP) case linkPopupShow
  @_spi(STP) case linkPopupSuccess
  @_spi(STP) case linkPopupCancel
  @_spi(STP) case linkPopupSkipped
  @_spi(STP) case linkPopupError
  @_spi(STP) case linkPopupLogout
  @_spi(STP) case linkAccountLookupFailure
  @_spi(STP) case luxeSerializeFailure
  @_spi(STP) case luxeImageSelectorIconDownloaded
  @_spi(STP) case luxeImageSelectorIconFromBundle
  @_spi(STP) case luxeImageSelectorIconNotFound
  @_spi(STP) case cs_add_payment_method_screen_presented
  @_spi(STP) case cs_select_payment_method_screen_presented
  @_spi(STP) case cs_select_payment_method_screen_confirmed_savedpm_success
  @_spi(STP) case cs_select_payment_method_screen_confirmed_savedpm_failure
  @_spi(STP) case cs_select_payment_method_screen_edit_tapped
  @_spi(STP) case cs_select_payment_method_screen_done_tapped
  @_spi(STP) case cs_select_payment_method_screen_removepm_success
  @_spi(STP) case cs_select_payment_method_screen_removepm_failure
  @_spi(STP) case cs_add_payment_method_via_setupintent_success
  @_spi(STP) case cs_add_payment_method_via_setupintent_canceled
  @_spi(STP) case cs_add_payment_method_via_setupintent_failure
  @_spi(STP) case cs_add_payment_method_via_createAttach_success
  @_spi(STP) case cs_add_payment_method_via_createAttach_failure
  @_spi(STP) case addressShow
  @_spi(STP) case addressCompleted
  @_spi(STP) case paymentMethodMessagingViewLoadSucceeded
  @_spi(STP) case paymentMethodMessagingViewLoadFailed
  @_spi(STP) case paymentMethodMessagingViewTapped
  @_spi(STP) case paymentSheetForceSuccess
  @_spi(STP) case paymentSheetLoadStarted
  @_spi(STP) case paymentSheetLoadSucceeded
  @_spi(STP) case paymentSheetLoadFailed
  @_spi(STP) case paymentSheetDismissed
  @_spi(STP) case paymentSheetCarouselPaymentMethodTapped
  @_spi(STP) case paymentSheetConfirmButtonTapped
  @_spi(STP) public init?(rawValue: Swift.String)
  @_spi(STP) public typealias RawValue = Swift.String
  @_spi(STP) public var rawValue: Swift.String {
    @_spi(STP) get
  }
}
public enum TransactionType : Swift.String, Swift.CaseIterable {
  case sale
  case authorize
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TransactionType]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TransactionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionClass : Swift.String, Swift.CaseIterable {
  case ecom
  case recur
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TransactionClass]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TransactionClass] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TokenFormat : Swift.String, Swift.CaseIterable {
  case none
  case hex32
  case alphaNum20
  case digit22
  case digit16
  case alphaNum32
  public static func getType(type: Swift.String) -> PaymentSDK.TokenFormat?
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TokenFormat]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TokenFormat] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TokeniseType : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case none
  case merchantMandatory
  case userMandatory
  case userOptinoal
  case userOptinoalDefaultOn
  public static func getType(type: Swift.Int) -> PaymentSDK.TokeniseType?
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PaymentSDK.TokeniseType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PaymentSDK.TokeniseType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlternativePaymentMethod : Swift.String, Swift.CaseIterable {
  case unionPay
  case stcPay
  case valu
  case meezaQR
  case omannet
  case knetCredit
  case knetDebit
  case fawry
  case aman
  case URPay
  case applePay
  public static func getType(type: Swift.String) -> PaymentSDK.AlternativePaymentMethod?
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.AlternativePaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.AlternativePaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers public class PaymentsSDKVariant {
  @_spi(STP) public static let variant: Swift.String
  @_spi(STP) public static var ocrTypeString: Swift.String {
    @_spi(STP) get
  }
  @_spi(STP) public static var paymentUserAgent: Swift.String {
    @_spi(STP) get
  }
  @_spi(STP) @objc deinit
}
extension Foundation.URLRequest {
  @_spi(STP) public mutating func stp_addParameters(toURL parameters: [Swift.String : Any])
  @_spi(STP) public mutating func stp_setFormPayload(_ formPayload: [Swift.String : Any])
  @_spi(STP) public mutating func stp_setMultipartForm(_ data: Foundation.Data?, boundary: Swift.String?)
}
@_spi(STP) public struct StripeAPIError : PaymentSDK.UnknownFieldsDecodable {
  @_spi(STP) public var type: PaymentSDK.StripeAPIError.ErrorType
  @_spi(STP) public var code: Swift.String?
  @_spi(STP) public var docUrl: Foundation.URL?
  @_spi(STP) public var message: Swift.String?
  @_spi(STP) public var param: Swift.String?
  @_spi(STP) public var statusCode: Swift.Int?
  @_spi(STP) public enum ErrorType : Swift.String, PaymentSDK.SafeEnumCodable {
    @_spi(STP) case apiError
    @_spi(STP) case cardError
    @_spi(STP) case idempotencyError
    @_spi(STP) case invalidRequestError
    @_spi(STP) case unparsable
    @_spi(STP) public init?(rawValue: Swift.String)
    @_spi(STP) public typealias RawValue = Swift.String
    @_spi(STP) public var rawValue: Swift.String {
      @_spi(STP) get
    }
  }
  @_spi(STP) public var _allResponseFieldsStorage: PaymentSDK.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public struct StripeAPIErrorResponse : PaymentSDK.UnknownFieldsDecodable {
  @_spi(STP) public var error: PaymentSDK.StripeAPIError?
  @_spi(STP) public var _allResponseFieldsStorage: PaymentSDK.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
public enum PaymentSDKError : Swift.Error {
  case emptyCreditCardHolderName
  case emptyCreditCardNumber
  case emptyCreditExpiryDate
  case emptyCreditCardCVV
  case invalidCreditCardHolderName
  case invalidCreditCardNumber
  case invalidCreditExpiryDate
  case expiredCreditExpiryDate
  case invalidCreditCardCVV
  case missingBillingInfo
  case emptyBillingFullName
  case emptyBillingEmail
  case emptyBillingAddress
  case emptyBillingPhone
  case emptyBillingCity
  case emptyBillingCountry
  case emptyBillingState
  case emptyBillingZIPCode
  case invalidBillingFullName
  case invalidBillingEmail
  case invalidBillingAddress
  case invalidBillingPhone
  case invalidBillingCity
  case invalidBillingCountry
  case invalidBillingState
  case invalidBillingZIPCode
  case missingShippingInfo
  case emptyShippingFullName
  case emptyShippingEmail
  case emptyShippingAddress
  case emptyShippingPhone
  case emptyShippingCity
  case emptyShippingCountry
  case emptyShippingState
  case emptyShippingZIPCode
  case invalidShippingFullName
  case invalidShippingEmail
  case invalidShippingAddress
  case invalidShippingPhone
  case invalidShippingCity
  case invalidShippingCountry
  case invalidShippingState
  case invalidShippingZIPCode
  case emptyProfileId
  case invalidProfileId
  case emptyServerKey
  case emptyClientKey
  case invalidAmount
  case emptyCartId
  case emptyCurrency
  case invalidCurrency
  case emptyCartDescription
  case emptyMerchantIndentifier
  case emptyMerchantName
  case missingMerchantCountryCode
  case invalidMerchantCountryCode
  case userNotAuthorizeForSelectedNetworks
  case somethingWentWrong
  case emptyAlternativePaymentMethods
  case applePayOnSimulatorNotSupported
  case emptyToken
  case emptySavedCardInfo
  public static func == (a: PaymentSDK.PaymentSDKError, b: PaymentSDK.PaymentSDKError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(STP) extension Swift.String {
  @_spi(STP) public func stp_stringByRemovingCharacters(from characterSet: Foundation.CharacterSet) -> Swift.String
  @_spi(STP) public var isSecretKey: Swift.Bool {
    @_spi(STP) get
  }
  @_spi(STP) public var nonEmpty: Swift.String? {
    @_spi(STP) get
  }
}
@_spi(STP) public func stringIfHasContentsElseNil(_ string: Swift.String?) -> Swift.String?
@objc public class PaymentSDKQueryConfiguration : ObjectiveC.NSObject, Swift.Codable {
  @objc public var serverKey: Swift.String
  @objc public var clientKey: Swift.String
  @objc public var merchantCountryCode: Swift.String
  @objc public var profileID: Swift.String
  @objc public var transactionReference: Swift.String
  public init(serverKey: Swift.String, clientKey: Swift.String, merchantCountryCode: Swift.String, profileID: Swift.String, transactionReference: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDK.STPAPIClient {
  @_spi(STP) public typealias FileAndUploadMetrics = (file: PaymentSDK.StripeFile, metrics: PaymentSDK.STPAPIClient.ImageUploadMetrics)
  @_spi(STP) public struct ImageUploadMetrics {
    @_spi(STP) public let timeToUpload: Foundation.TimeInterval
    @_spi(STP) public let fileSizeBytes: Swift.Int
  }
  @_spi(STP) public static let defaultImageFileName: Swift.String
  @_spi(STP) public func uploadImage(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<PaymentSDK.StripeFile, Swift.Error>) -> Swift.Void)
  @_spi(STP) public func uploadImageAndGetMetrics(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<PaymentSDK.STPAPIClient.FileAndUploadMetrics, Swift.Error>) -> Swift.Void)
  @_spi(STP) public func uploadImage(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil) -> PaymentSDK.Future<PaymentSDK.StripeFile>
  @_spi(STP) public func uploadImageAndGetMetrics(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil) -> PaymentSDK.Future<PaymentSDK.STPAPIClient.FileAndUploadMetrics>
}
@_spi(STP) @objc(STP_Internal_DownloadManager) public class DownloadManager : ObjectiveC.NSObject, Foundation.URLSessionDelegate {
  @_spi(STP) public typealias UpdateImageHandler = (UIKit.UIImage) -> Swift.Void
  @_spi(STP) public static let sharedManager: PaymentSDK.DownloadManager
  @_spi(STP) public init(urlSessionConfiguration: Foundation.URLSessionConfiguration = .default)
  @_spi(STP) @objc deinit
}
@_spi(STP) extension PaymentSDK.DownloadManager {
  @_spi(STP) public func imagePlaceHolder() -> UIKit.UIImage
}
extension Foundation.Bundle {
  @_spi(STP) public class func stp_applicationName() -> Swift.String?
  @_spi(STP) public class func stp_applicationVersion() -> Swift.String?
  @_spi(STP) public class func stp_applicationBundleId() -> Swift.String?
  @_spi(STP) public class func buildVersion() -> Swift.String?
  @_spi(STP) public class var displayName: Swift.String? {
    get
  }
}
extension PaymentSDK.STPErrorCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum STPErrorCode : Swift.Int {
  @objc(STPConnectionError) case connectionError = 40
  @objc(STPInvalidRequestError) case invalidRequestError = 50
  @objc(STPAuthenticationError) case authenticationError = 51
  @objc(STPAPIError) case apiError = 60
  @objc(STPCardError) case cardError = 70
  @objc(STPCancellationError) case cancellationError = 80
  @objc(STPEphemeralKeyDecodingError) case ephemeralKeyDecodingError = 1000
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class STPError : ObjectiveC.NSObject {
  @objc public static let stripeDomain: Swift.String
  @objc public static let STPPaymentHandlerErrorDomain: Swift.String
  @objc public static let errorMessageKey: Swift.String
  @objc public static let hintKey: Swift.String
  @objc public static let cardErrorCodeKey: Swift.String
  @objc public static let errorParameterKey: Swift.String
  @objc public static let stripeErrorCodeKey: Swift.String
  @objc public static let stripeErrorTypeKey: Swift.String
  @objc public static let stripeDeclineCodeKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSError {
  @_spi(STP) @_hasMissingDesignatedInitializers public class Utils {
    @_spi(STP) public static func localizedMessage(fromAPIErrorCode errorCode: Swift.String, declineCode: Swift.String? = nil) -> Swift.String?
    @_spi(STP) public static func cardErrorCode(fromAPIErrorCode errorCode: Swift.String) -> PaymentSDK.STPCardErrorCode?
    @_spi(STP) @objc deinit
  }
}
extension Foundation.NSError {
  @_spi(STP) public static func stp_error(from modernStripeError: PaymentSDK.StripeError) -> Foundation.NSError?
  @_spi(STP) public static func stp_error(errorType: Swift.String?, stripeErrorCode: Swift.String?, stripeErrorMessage: Swift.String?, errorParam: Swift.String?, declineCode: Any?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
  @_spi(STP) public static func stp_error(fromStripeResponse jsonDictionary: [Swift.AnyHashable : Any]?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
  @objc(stp_errorFromStripeResponse:) public static func stp_error(fromStripeResponse jsonDictionary: [Swift.AnyHashable : Any]?) -> Foundation.NSError?
}
public enum STPCardErrorCode : Swift.String {
  case invalidNumber
  case invalidExpMonth
  case invalidExpYear
  case invalidCVC
  case incorrectNumber
  case expiredCard
  case cardDeclined
  case incorrectCVC
  case processingError
  case incorrectZip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc extension PaymentSDK.STPError {
  @objc public static let invalidNumber: Swift.String
  @objc public static let invalidExpMonth: Swift.String
  @objc public static let invalidExpYear: Swift.String
  @objc public static let invalidCVC: Swift.String
  @objc public static let incorrectNumber: Swift.String
  @objc public static let expiredCard: Swift.String
  @objc public static let cardDeclined: Swift.String
  @objc public static let processingError: Swift.String
  @objc public static let incorrectCVC: Swift.String
  @objc public static let incorrectZip: Swift.String
}
public protocol UnknownFieldsDecodable : Swift.Decodable {
  var _allResponseFieldsStorage: PaymentSDK.NonEncodableParameters? { get set }
}
public protocol UnknownFieldsEncodable : Swift.Encodable {
  var _additionalParametersStorage: PaymentSDK.NonEncodableParameters? { get set }
}
public protocol SafeEnumDecodable : Swift.Decodable {
  static var unparsable: Self { get }
}
public protocol SafeEnumCodable : PaymentSDK.SafeEnumDecodable, Swift.Encodable {
}
extension PaymentSDK.UnknownFieldsDecodable {
  public var allResponseFields: [Swift.String : Any] {
    get
  }
}
extension PaymentSDK.UnknownFieldsEncodable {
  public var additionalParameters: [Swift.String : Any] {
    get
    set
  }
}
@_spi(STP) public enum UnknownFieldsCodableFloats : Swift.String {
  @_spi(STP) case PositiveInfinity
  @_spi(STP) case NegativeInfinity
  @_spi(STP) case NaN
  @_spi(STP) public init?(rawValue: Swift.String)
  @_spi(STP) public typealias RawValue = Swift.String
  @_spi(STP) public var rawValue: Swift.String {
    @_spi(STP) get
  }
}
public protocol UnknownFieldsCodable : PaymentSDK.UnknownFieldsDecodable, PaymentSDK.UnknownFieldsEncodable {
}
public struct NonEncodableParameters {
  @_spi(STP) public var storage: [Swift.String : Any] {
    get
  }
}
extension PaymentSDK.NonEncodableParameters : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDK.NonEncodableParameters : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension PaymentSDK.NonEncodableParameters : Swift.Equatable {
  public static func == (lhs: PaymentSDK.NonEncodableParameters, rhs: PaymentSDK.NonEncodableParameters) -> Swift.Bool
}
extension PaymentSDK.NonEncodableParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomLeafReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_spi(STP) public protocol STPAnalyticsProtocol {
  @_spi(STP) static var stp_analyticsIdentifier: Swift.String { get }
}
@_spi(STP) public protocol STPAnalyticsClientProtocol {
  @_spi(STP) func addClass<T>(toProductUsageIfNecessary klass: T.Type) where T : PaymentSDK.STPAnalyticsProtocol
  @_spi(STP) func log(analytic: PaymentSDK.Analytic, apiClient: PaymentSDK.STPAPIClient)
}
@_spi(STP) @objc @_inheritsConvenienceInitializers public class STPAnalyticsClient : ObjectiveC.NSObject, PaymentSDK.STPAnalyticsClientProtocol {
  @_spi(STP) @objc public static let sharedClient: PaymentSDK.STPAnalyticsClient
  @_spi(STP) @objc public var productUsage: Swift.Set<Swift.String>
  @_spi(STP) @objc public class func tokenType(fromParameters parameters: [Swift.AnyHashable : Any]) -> Swift.String?
  @_spi(STP) public func addClass<T>(toProductUsageIfNecessary klass: T.Type) where T : PaymentSDK.STPAnalyticsProtocol
  @_spi(STP) public func clearAdditionalInfo()
  @_spi(STP) public func additionalInfo() -> [Swift.String]
  @_spi(STP) public func log(analytic: PaymentSDK.Analytic, apiClient: PaymentSDK.STPAPIClient = .shared)
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
@_spi(STP) extension PaymentSDK.STPAnalyticsClient {
  @_spi(STP) public func commonPayload(_ apiClient: PaymentSDK.STPAPIClient) -> [Swift.String : Any]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@frozen public enum CardScanSheetResult {
  case completed(card: PaymentSDK.ScannedCard)
  case canceled
  case failed(error: Swift.Error)
}
public class CardScanSheet {
  public init()
  public func present(from presentingViewController: UIKit.UIViewController, completion: @escaping (PaymentSDK.CardScanSheetResult) -> Swift.Void, animated: Swift.Bool = true)
  @objc deinit
}
extension Foundation.NSError {
  @_spi(STP) @objc dynamic public class func stp_genericConnectionError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_genericFailedToParseResponseError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_ephemeralKeyDecodingError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_clientSecretError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidNumberUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardInvalidCVCUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidExpMonthUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidExpYearUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorExpiredCardUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorDeclinedUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_genericDeclineErrorUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorProcessingErrorUserMessage() -> Swift.String
  @_spi(STP) public static var stp_invalidOwnerName: Swift.String {
    get
  }
  @_spi(STP) public static var stp_invalidBankAccountIban: Swift.String {
    get
  }
}
public struct ScannedCard : Swift.Equatable {
  public let pan: Swift.String
  public let expiryMonth: Swift.String?
  public let expiryYear: Swift.String?
  public let name: Swift.String?
  public static func == (a: PaymentSDK.ScannedCard, b: PaymentSDK.ScannedCard) -> Swift.Bool
}
extension PaymentSDK.PaymentSDKCardInputView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setMerchnatLogo(image: UIKit.UIImage) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setPrimaryColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setSecondaryColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setSecondaryFontColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setPrimaryFont(font: UIKit.UIFont) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setStrokeColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setInputsCornerRadius(radius: CoreFoundation.CGFloat) -> PaymentSDK.PaymentSDKCardInputView
}
public enum CardScanSheetError : Swift.Error {
  case invalidClientSecret
  case unknown(debugDescription: Swift.String)
}
extension PaymentSDK.CardScanSheetError : Foundation.LocalizedError {
  public var localizedDescription: Swift.String {
    get
  }
}
extension PaymentSDK.CardScanSheetError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension PaymentSDK.PaymentManager {
  public static func startApplePayPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
}
@_spi(STP) public func stpDispatchToMainThreadIfNecessary(_ block: @escaping () -> Swift.Void)
@_spi(STP) public struct StripeFile : PaymentSDK.UnknownFieldsDecodable, Swift.Equatable {
  @_spi(STP) @frozen public enum Purpose : Swift.String, PaymentSDK.SafeEnumCodable, Swift.Equatable {
    @_spi(STP) case disputeEvidence
    @_spi(STP) case identityDocument
    @_spi(STP) case identityPrivate
    @_spi(STP) case unparsable
    @_spi(STP) public init?(rawValue: Swift.String)
    @_spi(STP) public typealias RawValue = Swift.String
    @_spi(STP) public var rawValue: Swift.String {
      @_spi(STP) get
    }
  }
  @_spi(STP) public let created: Foundation.Date
  @_spi(STP) public let id: Swift.String
  @_spi(STP) public let purpose: PaymentSDK.StripeFile.Purpose
  @_spi(STP) public let size: Swift.Int
  @_spi(STP) public let type: Swift.String?
  @_spi(STP) public var _allResponseFieldsStorage: PaymentSDK.NonEncodableParameters?
  @_spi(STP) public static func == (a: PaymentSDK.StripeFile, b: PaymentSDK.StripeFile) -> Swift.Bool
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CountryPickerViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) public var searchController: UIKit.UISearchController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PaymentSDK.CountryPickerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
}
extension PaymentSDK.CountryPickerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension PaymentSDK.CountryPickerViewController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
extension PaymentSDK.CountryPickerViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
}
extension PaymentSDK.CountryPickerViewController : UIKit.UISearchControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func willPresentSearchController(_ searchController: UIKit.UISearchController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func willDismissSearchController(_ searchController: UIKit.UISearchController)
}
@_spi(STP) @_hasMissingDesignatedInitializers public class UxAnalyzer : PaymentSDK.CreditCardOcrImplementation {
  @_spi(STP) public static func loadModelFromBundle() -> PaymentSDK.UxModel?
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers public class SSDOcrDetect {
  @_spi(STP) public static func loadModelFromBundle() -> PaymentSDK.SSDOcr?
  @_spi(STP) @objc deinit
}
@_spi(STP) public protocol AnalyticsClientV2Protocol {
  @_spi(STP) var clientId: Swift.String { get }
  @_spi(STP) func log(eventName: Swift.String, parameters: [Swift.String : Any])
}
@_spi(STP) public class AnalyticsClientV2 : PaymentSDK.AnalyticsClientV2Protocol {
  @_spi(STP) final public let clientId: Swift.String
  @_spi(STP) final public let origin: Swift.String
  @_spi(STP) public init(clientId: Swift.String, origin: Swift.String)
  @_spi(STP) public static func serialize(error: Swift.Error, filePath: Swift.StaticString?, line: Swift.UInt?) -> [Swift.String : Any]
  @_spi(STP) public func log(eventName: Swift.String, parameters: [Swift.String : Any])
  @_spi(STP) @objc deinit
}
@_spi(STP) extension PaymentSDK.AnalyticsClientV2Protocol {
  @_spi(STP) public func makeCommonPayload() -> [Swift.String : Any]
  @_spi(STP) public func payload(withEventName eventName: Swift.String, parameters: [Swift.String : Any]) -> [Swift.String : Any]
}
@_spi(STP) @_hasMissingDesignatedInitializers public class StripeJSONEncoder {
  @_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any]
  @_spi(STP) public var outputFormatting: Foundation.JSONSerialization.WritingOptions
  @_spi(STP) public func encode<T>(_ value: T, includingUnknownFields: Swift.Bool = true) throws -> Foundation.Data where T : Swift.Encodable
  @_spi(STP) public func encodeJSONDictionary<T>(_ value: T, includingUnknownFields: Swift.Bool = true) throws -> [Swift.String : Any] where T : Swift.Encodable
  @_spi(STP) @objc deinit
}
@_spi(STP) extension Foundation.Decimal {
  @_spi(STP) public var floatValue: Swift.Float {
    @_spi(STP) get
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class FraudDetectionData : Swift.Codable {
  @_spi(STP) public static let shared: PaymentSDK.FraudDetectionData
  @_spi(STP) final public var muid: Swift.String?
  @_spi(STP) final public var guid: Swift.String?
  @_spi(STP) final public var sid: Swift.String?
  @_spi(STP) @objc deinit
  @_spi(STP) final public func encode(to encoder: Swift.Encoder) throws
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) extension PaymentSDK.FraudDetectionData : Swift.Equatable {
  @_spi(STP) public static func == (lhs: PaymentSDK.FraudDetectionData, rhs: PaymentSDK.FraudDetectionData) -> Swift.Bool
}
@_spi(STP) extension Foundation.NSError {
  @_spi(STP) public class func stp_unexpectedErrorMessage() -> Swift.String
}
public struct PayModels {
}
extension PaymentSDK.CardImageVerificationSheet {
  public struct Configuration {
    public var apiClient: PaymentSDK.STPAPIClient
    @_spi(STP) public var strictModeFrames: PaymentSDK.CardImageVerificationSheet.StrictModeFrameCount
    public init()
  }
  @_spi(STP) public enum StrictModeFrameCount : Swift.Int, Swift.Equatable {
    @_spi(STP) case none
    @_spi(STP) case low
    @_spi(STP) case medium
    @_spi(STP) case high
    @_spi(STP) public init?(rawValue: Swift.Int)
    @_spi(STP) public typealias RawValue = Swift.Int
    @_spi(STP) public var rawValue: Swift.Int {
      @_spi(STP) get
    }
  }
}
@_spi(STP) public protocol Analytic {
  @_spi(STP) var event: PaymentSDK.STPAnalyticEvent { get }
  @_spi(STP) var params: [Swift.String : Any] { get }
}
@_spi(STP) public protocol ErrorAnalytic : PaymentSDK.Analytic {
  @_spi(STP) var error: Swift.Error { get }
}
@_spi(STP) public struct GenericAnalytic : PaymentSDK.Analytic {
  @_spi(STP) public let event: PaymentSDK.STPAnalyticEvent
  @_spi(STP) public let params: [Swift.String : Any]
  @_spi(STP) public init(event: PaymentSDK.STPAnalyticEvent, params: [Swift.String : Any])
}
@_spi(STP) public struct EmptyResponse : PaymentSDK.UnknownFieldsDecodable {
  @_spi(STP) public var _allResponseFieldsStorage: PaymentSDK.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) @_hasMissingDesignatedInitializers @available(macOS 10.13.2, iOS 11.2, tvOS 11.2, watchOS 4.2, *)
public class UxModel {
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class STPLocalizationUtils {
  @_spi(STP) final public class func localizedStripeString(forKey key: Swift.String, bundleLocator: PaymentSDK.BundleLocatorProtocol.Type) -> Swift.String
  @_spi(STP) @objc deinit
}
@_spi(STP) @inline(__always) public func STPNonLocalizedString(_ string: Swift.String) -> Swift.String
public typealias CPVCountry = PaymentSDK.Country
public enum SearchBarPosition {
  case tableViewHeader, navigationBar, hidden
  public static func == (a: PaymentSDK.SearchBarPosition, b: PaymentSDK.SearchBarPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Country : Swift.Equatable {
  public let name: Swift.String
  public let code: Swift.String
  public let phoneCode: Swift.String
  public func localizedName(_ locale: Foundation.Locale = Locale.current) -> Swift.String?
  public var flag: UIKit.UIImage {
    get
  }
}
public func == (lhs: PaymentSDK.Country, rhs: PaymentSDK.Country) -> Swift.Bool
public func != (lhs: PaymentSDK.Country, rhs: PaymentSDK.Country) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CountryPickerView : PaymentSDK.NibView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var flagImageView: UIKit.UIImageView! {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var countryDetailsLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) public var showCountryCodeInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showPhoneCodeInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showCountryNameInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var flagSpacingInView: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var dataSource: PaymentSDK.CountryPickerViewDataSource?
  @_Concurrency.MainActor(unsafe) weak public var delegate: PaymentSDK.CountryPickerViewDelegate?
  @_Concurrency.MainActor(unsafe) weak public var hostViewController: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public var selectedCountry: PaymentSDK.Country {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func showCountriesList(from viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) final public let countries: [PaymentSDK.Country]
  @objc deinit
}
extension PaymentSDK.CountryPickerView {
  @_Concurrency.MainActor(unsafe) public func setCountryByName(_ name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setCountryByPhoneCode(_ phoneCode: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setCountryByCode(_ code: Swift.String)
  @_Concurrency.MainActor(unsafe) public func getCountryByName(_ name: Swift.String) -> PaymentSDK.Country?
  @_Concurrency.MainActor(unsafe) public func getCountryByPhoneCode(_ phoneCode: Swift.String) -> PaymentSDK.Country?
  @_Concurrency.MainActor(unsafe) public func getCountryByCode(_ code: Swift.String) -> PaymentSDK.Country?
}
@objc public protocol PaymentManagerDelegate {
  @objc func paymentManager(didFinishTransaction transactionDetails: PaymentSDK.PaymentSDKTransactionDetails?, error: Swift.Error?)
  @objc optional func paymentManager(didRecieveValidation error: Swift.Error?)
  @objc optional func paymentManager(didCancelPayment error: Swift.Error?)
  @objc optional func paymentManager(didStartPaymentTransaction rootViewController: UIKit.UIViewController)
}
@_inheritsConvenienceInitializers @objc public class PaymentManager : ObjectiveC.NSObject {
  public static func startCardPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
  public static func start3DSecureTokenizedCardPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, savedCardInfo: PaymentSDK.PaymentSDKSavedCardInfo, token: Swift.String, delegate: PaymentSDK.PaymentManagerDelegate?)
  public static func startTokenizedCardPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, token: Swift.String, transactionRef: Swift.String, delegate: PaymentSDK.PaymentManagerDelegate?)
  public static func startPaymentWithSavedCards(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, support3DS: Swift.Bool, delegate: PaymentSDK.PaymentManagerDelegate?)
  public static func queryTransaction(queryConfiguration: PaymentSDK.PaymentSDKQueryConfiguration, completion: @escaping (PaymentSDK.PaymentSDKTransactionDetails?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public func == (lhs: PaymentSDK.CreditCardValidationType, rhs: PaymentSDK.CreditCardValidationType) -> Swift.Bool
public struct CreditCardValidationType : Swift.Equatable {
  public var name: Swift.String
  public var regex: Swift.String
  public init(name: Swift.String, regex: Swift.String)
  public init(dict: [Swift.String : Any])
}
@_spi(STP) @frozen public enum FinancialConnectionsSDKResult {
  @_spi(STP) case completed(linkedBank: PaymentSDK.LinkedBank)
  @_spi(STP) case cancelled
  @_spi(STP) case failed(error: Swift.Error)
}
@_spi(STP) public protocol FinancialConnectionsSDKInterface {
  @_spi(STP) init()
  @_spi(STP) func presentFinancialConnectionsSheet(apiClient: PaymentSDK.STPAPIClient, clientSecret: Swift.String, returnURL: Swift.String?, from presentingViewController: UIKit.UIViewController, completion: @escaping (PaymentSDK.FinancialConnectionsSDKResult) -> Swift.Void)
}
@_spi(STP) public protocol LinkedBank {
  @_spi(STP) var sessionId: Swift.String { get }
  @_spi(STP) var accountId: Swift.String { get }
  @_spi(STP) var displayName: Swift.String? { get }
  @_spi(STP) var bankName: Swift.String? { get }
  @_spi(STP) var last4: Swift.String? { get }
  @_spi(STP) var instantlyVerified: Swift.Bool { get }
}
@_spi(STP) @objc public protocol STPURLCallbackListener : ObjectiveC.NSObjectProtocol {
  @_spi(STP) @objc func handleURLCallback(_ url: Foundation.URL) -> Swift.Bool
}
@_spi(STP) @objc @_inheritsConvenienceInitializers public class STPURLCallbackHandler : ObjectiveC.NSObject {
  @_spi(STP) public static var sharedHandler: PaymentSDK.STPURLCallbackHandler
  @_spi(STP) @objc public class func shared() -> PaymentSDK.STPURLCallbackHandler
  @_spi(STP) @discardableResult
  @objc public func handleURLCallback(_ url: Foundation.URL) -> Swift.Bool
  @_spi(STP) @objc(registerListener:forURL:) public func register(_ listener: PaymentSDK.STPURLCallbackListener, for url: Foundation.URL)
  @_spi(STP) @objc public func unregisterListener(_ listener: PaymentSDK.STPURLCallbackListener)
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPadAir5, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, iPhoneSE3, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleWatchS7, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: PaymentSDK.Model {
    get
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers public class CreditCardOcrImplementation {
  @_spi(STP) @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PaymentSDKShippingDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var addressLine: Swift.String?
  @objc public var city: Swift.String?
  @objc public var state: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var zip: Swift.String?
  @objc override dynamic public init()
  public init(name: Swift.String?, email: Swift.String?, phone: Swift.String?, addressLine: Swift.String?, city: Swift.String?, state: Swift.String?, countryCode: Swift.String?, zip: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDK.PaymentSDKShippingDetails : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_spi(STP) @_hasMissingDesignatedInitializers public class Future<Value> {
  @_spi(STP) public func observe(on queue: Dispatch.DispatchQueue? = nil, using callback: @escaping (Swift.Result<Value, Swift.Error>) -> Swift.Void)
  @_spi(STP) public func chained<T>(on queue: Dispatch.DispatchQueue? = nil, using closure: @escaping (Value) throws -> PaymentSDK.Future<T>) -> PaymentSDK.Future<T>
  @_spi(STP) @objc deinit
}
@_spi(STP) @_inheritsConvenienceInitializers public class Promise<Value> : PaymentSDK.Future<Value> {
  @_spi(STP) public init()
  @_spi(STP) convenience public init(value: Value)
  @_spi(STP) convenience public init(error: Swift.Error)
  @_spi(STP) public func resolve(with value: Value)
  @_spi(STP) public func reject(with error: Swift.Error)
  @_spi(STP) public func fullfill(with result: Swift.Result<Value, Swift.Error>)
  @_spi(STP) public func fulfill(with block: () throws -> Value)
  @_spi(STP) @objc deinit
}
extension PaymentSDK.PaymentSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public class CreditCardValidator {
  public var types: [PaymentSDK.CreditCardValidationType] {
    get
    set
  }
  public init()
  public func getType(from string: Swift.String) -> PaymentSDK.CreditCardValidationType?
  public func type(from string: Swift.String) -> PaymentSDK.CreditCardValidationType?
  public func validate(string: Swift.String) -> Swift.Bool
  public func validate(string: Swift.String, forType type: PaymentSDK.CreditCardValidationType) -> Swift.Bool
  public func onlyNumbers(string: Swift.String) -> Swift.String
  @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers @available(macOS 10.13.2, iOS 11.2, tvOS 11.2, watchOS 4.2, *)
public class SSDOcr {
  @_spi(STP) @objc deinit
}
@_spi(STP) extension UIKit.UIActivityIndicatorView {
  @_spi(STP) @_Concurrency.MainActor(unsafe) public func stp_startAnimatingAndShow()
  @_spi(STP) @_Concurrency.MainActor(unsafe) public func stp_stopAnimatingAndHide()
}
@_inheritsConvenienceInitializers @objc public class STPAPIClient : ObjectiveC.NSObject {
  @objc public static let STPSDKVersion: Swift.String
  @objc(sharedClient) public static let shared: PaymentSDK.STPAPIClient
  @objc public var publishableKey: Swift.String? {
    @objc get
    @objc set
  }
  @_spi(STP) public var _stored_configuration: ObjectiveC.NSObject?
  @objc public var stripeAccount: Swift.String?
  @objc public var appInfo: PaymentSDK.STPAppInfo?
  @objc public static let apiVersion: Swift.String
  @_spi(STP) public var apiURL: Foundation.URL!
  @_spi(STP) public var urlSession: Foundation.URLSession
  @_spi(STP) public var sourcePollers: [Swift.String : ObjectiveC.NSObject]?
  @_spi(STP) public var sourcePollersQueue: Dispatch.DispatchQueue?
  @_spi(STP) public var betas: Swift.Set<Swift.String>
  @_spi(STP) public var publishableKeyIsUserKey: Swift.Bool {
    get
  }
  @_spi(DashboardOnly) public var userKeyLiveMode: Swift.Bool
  @objc override dynamic public init()
  @objc(initWithPublishableKey:) convenience public init(publishableKey: Swift.String)
  @_spi(STP) public func configuredRequest(for url: Foundation.URL, using ephemeralKeySecret: Swift.String? = nil, additionalHeaders: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest
  @_spi(STP) public func authorizationHeader(using substituteAuthorizationBearer: Swift.String? = nil) -> [Swift.String : Swift.String]
  @_spi(STP) public var isTestmode: Swift.Bool {
    get
  }
  @objc deinit
}
extension PaymentSDK.STPAPIClient {
  @_spi(STP) public func get<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func get<T>(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func post<T>(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func post<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil) -> PaymentSDK.Promise<T> where T : Swift.Decodable
  @_spi(STP) public func post<I, O>(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = nil) -> PaymentSDK.Promise<O> where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public func post<I, O>(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<O, Swift.Error>) -> Swift.Void) where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public func post<I, O>(url: Foundation.URL, object: I, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<O, Swift.Error>) -> Swift.Void) where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public static func decodeResponse<T>(data: Foundation.Data?, error: Swift.Error?, response: Foundation.URLResponse?) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
}
@_spi(STP) public typealias ImageDataAndSize = (imageData: Foundation.Data, imageSize: CoreFoundation.CGSize)
extension UIKit.UIImage {
  @_spi(STP) public static let defaultCompressionQuality: CoreFoundation.CGFloat
  @_spi(STP) public func jpegDataAndDimensions(maxBytes: Swift.Int? = nil, compressionQuality: CoreFoundation.CGFloat = defaultCompressionQuality) -> PaymentSDK.ImageDataAndSize
  @_spi(STP) public func heicDataAndDimensions(maxBytes: Swift.Int? = nil, compressionQuality: CoreFoundation.CGFloat = defaultCompressionQuality) -> PaymentSDK.ImageDataAndSize
  @_spi(STP) public func resized(to scale: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension Swift.Array where Element : UIKit.UIImage {
  @_spi(STP) public func heicData(compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality) -> Foundation.Data?
}
public enum CancellationReason : Swift.String, Swift.Equatable {
  case back
  case closed
  case userCannotScan
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_spi(STP) public protocol AnalyticLoggableError : Swift.Error {
  @_spi(STP) func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
}
@_spi(STP) public protocol AnalyticLoggableStringError : Swift.Error {
  @_spi(STP) var loggableType: Swift.String { get }
}
@_spi(STP) extension PaymentSDK.AnalyticLoggableStringError where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  @_spi(STP) public var loggableType: Swift.String {
    @_spi(STP) get
  }
}
@_spi(STP) extension Swift.Error {
  @_spi(STP) public func serializeForLogging() -> [Swift.String : Any]
}
@_spi(STP) public protocol BundleLocatorProtocol {
  @_spi(STP) static var internalClass: Swift.AnyClass { get }
  @_spi(STP) static var bundleName: Swift.String { get }
  @_spi(STP) static var resourcesBundle: Foundation.Bundle { get }
}
@_spi(STP) extension PaymentSDK.BundleLocatorProtocol {
  @_spi(STP) public static func computeResourcesBundle() -> Foundation.Bundle
}
extension PaymentSDK.PaymentManager {
  public static func startAlternativePaymentMethod(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
}
@_spi(STP) public struct StripeAPIConfiguration {
  @_spi(STP) public static let sharedUrlSessionConfiguration: Foundation.URLSessionConfiguration
}
extension PaymentSDK.STPTextValidationState : Swift.Equatable {}
extension PaymentSDK.STPTextValidationState : Swift.Hashable {}
extension PaymentSDK.STPTextValidationState : Swift.RawRepresentable {}
extension PaymentSDK.STPAnalyticEvent : Swift.Equatable {}
extension PaymentSDK.STPAnalyticEvent : Swift.Hashable {}
extension PaymentSDK.STPAnalyticEvent : Swift.RawRepresentable {}
extension PaymentSDK.TransactionType : Swift.Equatable {}
extension PaymentSDK.TransactionType : Swift.Hashable {}
extension PaymentSDK.TransactionType : Swift.RawRepresentable {}
extension PaymentSDK.TransactionClass : Swift.Equatable {}
extension PaymentSDK.TransactionClass : Swift.Hashable {}
extension PaymentSDK.TransactionClass : Swift.RawRepresentable {}
extension PaymentSDK.TokenFormat : Swift.Equatable {}
extension PaymentSDK.TokenFormat : Swift.Hashable {}
extension PaymentSDK.TokenFormat : Swift.RawRepresentable {}
extension PaymentSDK.TokeniseType : Swift.Equatable {}
extension PaymentSDK.TokeniseType : Swift.Hashable {}
extension PaymentSDK.TokeniseType : Swift.RawRepresentable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.Equatable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.Hashable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.RawRepresentable {}
extension PaymentSDK.StripeAPIError.ErrorType : Swift.Equatable {}
extension PaymentSDK.StripeAPIError.ErrorType : Swift.Hashable {}
extension PaymentSDK.StripeAPIError.ErrorType : Swift.RawRepresentable {}
extension PaymentSDK.PaymentSDKError : Swift.Equatable {}
extension PaymentSDK.PaymentSDKError : Swift.Hashable {}
extension PaymentSDK.StripeFile.Purpose : Swift.Hashable {}
extension PaymentSDK.StripeFile.Purpose : Swift.RawRepresentable {}
extension PaymentSDK.StripeFile.Purpose : Swift.Sendable {}
extension PaymentSDK.STPErrorCode : Swift.Equatable {}
extension PaymentSDK.STPErrorCode : Swift.Hashable {}
extension PaymentSDK.STPErrorCode : Swift.RawRepresentable {}
extension PaymentSDK.STPCardErrorCode : Swift.Equatable {}
extension PaymentSDK.STPCardErrorCode : Swift.Hashable {}
extension PaymentSDK.STPCardErrorCode : Swift.RawRepresentable {}
extension PaymentSDK.UnknownFieldsCodableFloats : Swift.Equatable {}
extension PaymentSDK.UnknownFieldsCodableFloats : Swift.Hashable {}
extension PaymentSDK.UnknownFieldsCodableFloats : Swift.RawRepresentable {}
extension PaymentSDK.CardImageVerificationSheet.StrictModeFrameCount : Swift.Hashable {}
extension PaymentSDK.CardImageVerificationSheet.StrictModeFrameCount : Swift.RawRepresentable {}
extension PaymentSDK.SearchBarPosition : Swift.Equatable {}
extension PaymentSDK.SearchBarPosition : Swift.Hashable {}
extension PaymentSDK.Model : Swift.Equatable {}
extension PaymentSDK.Model : Swift.Hashable {}
extension PaymentSDK.Model : Swift.RawRepresentable {}
extension PaymentSDK.CancellationReason : Swift.Hashable {}
extension PaymentSDK.CancellationReason : Swift.RawRepresentable {}
